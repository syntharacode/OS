// React hook for managing local component state
import { useState } from "react";
// Axios is used for making HTTP requests to the Synthara OS API
import axios from "axios";

// Main interactive component for querying the LLM and viewing its response
export default function TextInput() {
  // State to store the user's prompt input
  const [input, setInput] = useState("");
  // State to store the output generated by the model
  const [output, setOutput] = useState("");
  // Loading state for showing spinner/feedback during API request
  const [loading, setLoading] = useState(false);

  // Sends a prompt to the Synthara OS backend for generation
  const handleQuery = async () => {
    if (!input.trim()) return; // Ignore empty/whitespace prompts
    setLoading(true);          // Set loading while waiting for API response
    try {
      // POST the input prompt with default generation parameters
      const res = await axios.post("/api/llm/query", {
        input,
        max_tokens: 100,
        temperature: 0.7,
      });
      // Store the result from the model in local state
      setOutput(res.data.response);
    } catch (err) {
      // Log error and show fallback message to user
      console.error("LLM query failed:", err);
      setOutput("Error: Unable to reach Synthara OS");
    } finally {
      setLoading(false); // Reset loading state when request finishes
    }
  };

  // Copies the output text to the clipboard using the Web Clipboard API
  const handleCopy = () => {
    navigator.clipboard.writeText(output);
  };

  // Render text input, submit button, and output display (conditionally)
  return (
    <div className="p-4 max-w-xl mx-auto">
      {/* Prompt input area */}
      <textarea
        className="w-full h-40 p-2 border rounded"
        placeholder="Type your training or query prompt here..."
        value={input}
        onChange={(e) => setInput(e.target.value)}
      />

      {/* Button to send the input to Synthara OS */}
      <button
        className="mt-2 px-4 py-2 bg-blue-600 text-white rounded"
        onClick={handleQuery}
        disabled={loading}
      >
        {loading ? "Processing..." : "Send to Synthara OS"}
      </button>

      {/* Output block shown only when a model response exists */}
      {output && (
        <div className="mt-4 p-3 border rounded bg-gray-100">
          <strong>Output:</strong>
          <pre className="whitespace-pre-wrap">{output}</pre>

          {/* Button to copy model output to clipboard */}
          <button
            onClick={handleCopy}
            className="mt-2 px-3 py-1 text-sm bg-gray-200 hover:bg-gray-300 rounded"
          >
            Copy Output
          </button>
        </div>
      )}
    </div>
  );
}
